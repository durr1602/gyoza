##### Ad-hoc conda apptainer #####


containerized: "docker://durr1602/gyoza:latest"


##### Set up report #####


report: "report/workflow.rst"


##### Load rules #####


include: "rules/common.smk"
include: "rules/cutadapt.smk"
include: "rules/pandaseq.smk"
include: "rules/vsearch.smk"
include: "rules/stats.smk"
include: "rules/pool_stats.smk"
include: "rules/parse_fasta_v2.smk"
include: "rules/process_read_counts.smk"


if config["qc"]["perform"]:

    include: "rules/qc.smk"

design = config["design"]
if design == "random":
    include: "rules/annotate_random.smk"
elif design == "provided":
    include: "rules/compare.smk"
    include: "rules/annotate_mutants.smk"
elif design == "codon":
    include: "rules/generate_expected_mutants.smk"
    include: "rules/compare.smk"
    include: "rules/annotate_mutants.smk"
else:
    raise ValueError(f"Unknown experiment design: {design}")


##### Target(s) #####


rule all:
    input:
        "results/all_stats.csv"
        #get_target(),


##### Generate report that includes all completed steps #####


if config["report"]["generate"]:

    onsuccess:
        (STEPs,) = glob_wildcards("results/done/{step}.done")
        if (config["qc"]["perform"]) & (exists("results/0_qc/multiqc.html")):
            STEPs.append("multiqc")
        shell(f"snakemake {' '.join(STEPs)} --report results/report.html")

    onerror:
        (STEPs,) = glob_wildcards("results/done/{step}.done")
        if (config["qc"]["perform"]) & (exists("results/0_qc/multiqc.html")):
            STEPs.append("multiqc")
        if len(STEPs) > 0:
            shell(f"snakemake {' '.join(STEPs)} --report results/report.html")
