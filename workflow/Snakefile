##### Ad-hoc conda apptainer #####


containerized: "docker://durr1602/gyoza:latest"


##### Load main report caption #####


report: "report/workflow.rst"


##### Load rules #####


include: "rules/common.smk"

include: "rules/vsearch.smk"
include: "rules/stats.smk"
include: "rules/pool_stats.smk"
include: "rules/parse_fasta.smk"


RF_VALS = ["R1"]
if config["reads"]["paired"]:
    RF_VALS.append("R2")
    include: "rules/cutadapt.smk"
    include: "rules/pandaseq.smk"
else:
    include: "rules/cutadapt-se.smk"
if config["qc"]["perform"]:
    include: "rules/qc.smk"


design = config["design"]
if design == "random":
    include: "rules/annotate_random.smk"
elif design == "provided":
    include: "rules/compare.smk"
    include: "rules/annotate_mutants.smk"
elif design == "codon":
    include: "rules/generate_expected_mutants.smk"
    include: "rules/compare.smk"
    include: "rules/annotate_mutants.smk"
else:
    raise ValueError(f"Unknown experiment design: {design}")


if config["process_read_counts"]:
    include: "rules/process_read_counts.smk"


##### Target(s) #####


rule all:
    input:
        get_target(),


##### Copy scripts package into Snakemake folder #####
# This is a workaround to be able to import modules from the scripts folder
# Even when running a snakedeployed workflow
onstart:
    import os, shutil, sys

    src = os.path.abspath("scripts")
    dst = os.path.abspath(os.path.join(".snakemake", "scripts", "scripts"))

    if os.path.isdir(src):
        shutil.rmtree(dst, ignore_errors=True)
        shutil.copytree(src, dst)
        open(os.path.join(dst, "__init__.py"), "a").close()

    # Add the parent of the copied `scripts` dir to sys.path
    parent_path = os.path.dirname(dst)
    if parent_path not in sys.path:
        sys.path.insert(0, parent_path)


##### Generate dynamic report upon completion of the workflow #####

if config["report"]["generate"]:
    onsuccess:
        graphs = collect_graphs()
    
        # Add QC report if present
        qc_path = Path("results/0_qc/multiqc.html")
        if config["qc"]["perform"] and qc_path.exists():
            graphs.append(str(qc_path))
    
        if graphs:
            # Inject config (if specified on the command line)
            config_arg = None
            args = sys.argv
            if "--configfile" in args:
                idx = args.index("--configfile")
                if idx + 1 < len(args):
                    config_arg = args[idx + 1]

            configfile_str = f"--configfile {config_arg}" if config_arg else ""

            report_cmd = (
                "snakemake "
                + " ".join(str(f) for f in graphs)
                + (" " + configfile_str if configfile_str else "")
                + " --report results/report.html"
            )

            shell(report_cmd)
        else:
            print(">> No graphs found. Skipping report generation.")